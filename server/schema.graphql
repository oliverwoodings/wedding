type Query {
  publicUser(codeOrEmail: String!): PublicUser
  tracks(query: String!): SpotifySearchResults
  user: User
}

type PublicUser {
  guests: [PublicGuest]!
  new: Boolean!
}

type PublicGuest {
  firstName: String!
}

type User {
  guests: [Guest]!
  new: Boolean!
  code: String!
  email: String!
}

type Guest {
  firstName: String!
  lastName: String!
}

type SpotifySearchResults {
  limit: Int
  offset: Int
  total: Int
  items: [SpotifyTrack]!
}

type SpotifyTrack {
  id: String!
  album: SpotifyAlbum
  artists: [SpotifyArtist]!
  name: String!
  previewUrl: String
  durationMs: Int!
  externalUrls: SpotifyExternalUrls!
}

type SpotifyAlbum {
  name: String!
  images: [SpotifyImage]!
}

type SpotifyImage {
  height: Int!
  width: Int!
  url: String!
}

type SpotifyArtist {
  name: String!
}

type SpotifyExternalUrls {
  spotify: String
}

type Mutation {
  login(codeOrEmail: String!, password: String!): User
  changePassword(code: String!, email: String!, password: String!): User
}
